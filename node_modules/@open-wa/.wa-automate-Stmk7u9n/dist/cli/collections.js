"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCollections = exports.collections = void 0;
const __1 = require("..");
const postman_2_swagger_1 = __importDefault(require("postman-2-swagger"));
const fs_extra_1 = require("fs-extra");
exports.collections = {};
const generateCollections = (config, spinner) => __awaiter(void 0, void 0, void 0, function* () {
    let swCol = null;
    let pmCol = null;
    spinner.info('Generating Swagger Spec');
    pmCol = yield __1.generatePostmanJson(config);
    spinner.succeed(`Postman collection generated: open-wa-${config.sessionId}.postman_collection.json`);
    swCol = postman_2_swagger_1.default(pmCol);
    /**
     * Fix swagger docs by removing the content type as a required paramater
     */
    Object.keys(swCol.paths).forEach(p => {
        const path = swCol.paths[p].post;
        if (config.key)
            swCol.paths[p].post.security = [
                {
                    "api_key": []
                }
            ];
        swCol.paths[p].nickname = p.replace("/", "");
        swCol.paths[p].post.externalDocs = {
            "description": "Documentation",
            "url": swCol.paths[p].post.documentationUrl
        };
        swCol.paths[p].post.requestBody = {
            "description": path.summary,
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object"
                    },
                    example: path.parameters[1].example
                }
            }
        };
        delete path.parameters;
    });
    delete swCol.swagger;
    swCol.openapi = "3.0.3";
    swCol.externalDocs = {
        "description": "Find more info here",
        "url": "https://openwa.dev/"
    };
    if (config.key) {
        swCol.components = {
            "securitySchemes": {
                "api_key": {
                    "type": "apiKey",
                    "name": "api_key",
                    "in": "header"
                }
            }
        };
        swCol.security = [
            {
                "api_key": []
            }
        ];
    }
    //Sort alphabetically
    const x = {};
    Object.keys(swCol.paths).sort().map(k => x[k] = swCol.paths[k]);
    swCol.paths = x;
    fs_extra_1.writeJsonSync("./open-wa-" + config.sessionId + ".sw_col.json", swCol);
    exports.collections['postman'] = pmCol;
    exports.collections['swagger'] = swCol;
    spinner.succeed('API collections (swagger + postman) generated successfully');
    return;
});
exports.generateCollections = generateCollections;
